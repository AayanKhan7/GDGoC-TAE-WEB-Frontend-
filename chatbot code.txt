import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

class ChatbotScreen extends StatefulWidget {
  const ChatbotScreen({super.key});

  @override
  State<ChatbotScreen> createState() => _ChatbotScreenState();
}

class _ChatbotScreenState extends State<ChatbotScreen> {
  final TextEditingController _controller = TextEditingController();
  final ScrollController _scrollController = ScrollController();

  List<Map<String, String>> messages = [
    {"sender": "bot", "text": "Hello! How can I help you today?"}
  ];

  List<Map<String, dynamic>> conversationHistory = [];

  String selectedLanguage = "English";
  String lastLanguage = "English";

  // ⚠️ In production: DO NOT keep API key here
  final String apiKey = "AIzaSyBc3s_v6TI7lRiTwBW_IkhU9MK63ETr5Dw";
  final String apiUrl =
      "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent";

  Future<void> sendMessage() async {
    final userMessage = _controller.text.trim();
    if (userMessage.isEmpty) return;

    setState(() {
      messages.add({"sender": "user", "text": userMessage});
    });
    _controller.clear();

    if (conversationHistory.isEmpty || selectedLanguage != lastLanguage) {
      conversationHistory = [
        {
          "role": "user",
          "parts": [
            {"text": "Please reply in $selectedLanguage."}
          ]
        }
      ];
      lastLanguage = selectedLanguage;
    }

    conversationHistory.add({
      "role": "user",
      "parts": [
        {"text": userMessage}
      ]
    });

    try {
      final response = await http.post(
        Uri.parse(apiUrl),
        headers: {
          "Content-Type": "application/json",
          "X-goog-api-key": apiKey,
        },
        body: jsonEncode({
          "contents": conversationHistory,
          "generationConfig": {"temperature": 0.7, "maxOutputTokens": 200},
        }),
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        final botResponse =
            data["candidates"]?[0]?["content"]?["parts"]?[0]?["text"] ??
                "Sorry, I couldn't get a response.";

        setState(() {
          messages.add({"sender": "bot", "text": botResponse});
        });

        conversationHistory.add({
          "role": "model",
          "parts": [
            {"text": botResponse}
          ]
        });
      } else {
        setState(() {
          messages.add({
            "sender": "bot",
            "text": "Error: ${response.statusCode}. Try again later."
          });
        });
      }
    } catch (e) {
      setState(() {
        messages.add({"sender": "bot", "text": "Error: $e"});
      });
    }

    Future.delayed(const Duration(milliseconds: 100), () {
      _scrollController.jumpTo(_scrollController.position.maxScrollExtent);
    });
  }

  @override
  Widget build(BuildContext context) {
    final screenWidth = MediaQuery.of(context).size.width;
    final screenHeight = MediaQuery.of(context).size.height;

    // Adaptive sizes
    final double bubblePadding = screenWidth * 0.04;
    final double fontSize = screenWidth * 0.04;
    final double iconSize = screenWidth * 0.07;
    final double spacing = screenWidth * 0.03;
    final double textFieldHeight = screenHeight * 0.07;

    return Scaffold(
      appBar: AppBar(
        title: const Text("Gemini Chatbot"),
        actions: [
          DropdownButton<String>(
            value: selectedLanguage,
            onChanged: (value) {
              if (value != null) {
                setState(() => selectedLanguage = value);
              }
            },
            items: ["English", "Hindi", "Marathi"]
                .map((lang) => DropdownMenuItem(
              value: lang,
              child: Text(
                lang,
                style: TextStyle(fontSize: fontSize),
              ),
            ))
                .toList(),
          ),
          SizedBox(width: spacing),
        ],
      ),
      body: Column(
        children: [
          Expanded(
            child: ListView.builder(
              controller: _scrollController,
              itemCount: messages.length,
              itemBuilder: (context, index) {
                final msg = messages[index];
                final isUser = msg["sender"] == "user";
                return Align(
                  alignment:
                  isUser ? Alignment.centerRight : Alignment.centerLeft,
                  child: Container(
                    margin: EdgeInsets.symmetric(
                        vertical: spacing / 2, horizontal: spacing),
                    padding: EdgeInsets.all(bubblePadding),
                    decoration: BoxDecoration(
                      color: isUser ? Colors.blue : Colors.grey[300],
                      borderRadius: BorderRadius.circular(bubblePadding),
                    ),
                    child: Text(
                      msg["text"] ?? "",
                      style: TextStyle(
                        color: isUser ? Colors.white : Colors.black,
                        fontSize: fontSize,
                      ),
                    ),
                  ),
                );
              },
            ),
          ),
          Container(
            padding: EdgeInsets.all(spacing),
            height: textFieldHeight + spacing * 2,
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: _controller,
                    onSubmitted: (_) => sendMessage(),
                    decoration: InputDecoration(
                      hintText: "Type your message...",
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(bubblePadding),
                      ),
                      contentPadding: EdgeInsets.symmetric(
                          horizontal: spacing, vertical: spacing),
                    ),
                    style: TextStyle(fontSize: fontSize),
                  ),
                ),
                SizedBox(width: spacing),
                IconButton(
                  icon: Icon(Icons.send, size: iconSize),
                  color: Colors.blue,
                  onPressed: sendMessage,
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}
import 'package:flutter/material.dart';

class AppColors {
  static const MaterialColor primaryGreen = Colors.green;
  static const Color highPriorityRed = Color(0xFFFFF0F0);
  static const Color highPriorityRedText = Color(0xFFE53935);
  static const Color mediumPriorityYellow = Color(0xFFFFF9E8);
  static const Color mediumPriorityYellowText = Color(0xFFFFA900);
  static const Color lowPriorityBlue = Color(0xFFEAF5FF);
  static const Color lowPriorityBlueText = Color(0xFF3B82F6);
  static const Color cardBackground = Colors.white;
  static const Color iconColor = Colors.green;
}


